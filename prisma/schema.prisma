// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  role          UserRole  @default(CLIENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  clientProfile ClientProfile?
  agentProfile  AgentProfile?
  bookings      Booking[]
  reviews       Review[]
  payments      Payment[]
  favorites     Favorite[]
  sentMessages  Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  notifications Notification[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  CLIENT
  AGENT
  ADMIN
}

enum AgentStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  PAYPAL
  AFTERPAY
}

model ClientProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  dateOfBirth DateTime?
  nationality String?
  address     String?
  city        String?
  state       String?
  postcode    String?
  country     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AgentProfile {
  id                    String       @id @default(cuid())
  userId                String       @unique
  maraNumber            String?      @unique
  maraVerified          Boolean      @default(false)
  businessName          String?
  businessAddress       String?
  businessCity          String?
  businessState         String?
  businessPostcode      String?
  businessCountry       String?
  businessPhone         String?
  businessEmail         String?
  businessWebsite       String?
  calendlyUrl           String?
  bio                   String?      @db.Text
  specializations       String[]     // Array of visa types
  languages             String[]     // Array of languages spoken
  hourlyRate            Decimal?     @db.Decimal(10, 2)
  consultationFee       Decimal?     @db.Decimal(10, 2)
  experience            Int?         // Years of experience
  qualifications        String[]     // Array of qualifications
  certifications        String[]     // Array of certifications
  status                AgentStatus  @default(PENDING)
  isAvailable           Boolean      @default(true)
  rating                Decimal?     @db.Decimal(3, 2)
  totalReviews          Int          @default(0)
  totalBookings         Int          @default(0)
  totalEarnings         Decimal      @default(0) @db.Decimal(10, 2)
  stripeAccountId       String?
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  suspendReason         String?

  user                  User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookings              Booking[]
  reviews               Review[]
  availability          Availability[]
  services              Service[]
  documents             Document[]
  favorites             Favorite[]
}

model Service {
  id          String   @id @default(cuid())
  agentId     String
  name        String
  description String?  @db.Text
  price       Decimal  @db.Decimal(10, 2)
  duration    Int      // Duration in minutes
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  agent       AgentProfile @relation(fields: [agentId], references: [id], onDelete: Cascade)
  bookings    Booking[]
}

model Availability {
  id        String   @id @default(cuid())
  agentId   String
  dayOfWeek Int      // 0 = Sunday, 1 = Monday, etc.
  startTime String   // Format: "09:00"
  endTime   String   // Format: "17:00"
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  agent     AgentProfile @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@unique([agentId, dayOfWeek])
}

model Booking {
  id          String        @id @default(cuid())
  clientId    String
  agentId     String
  serviceId   String?
  date        DateTime
  startTime   String        // Format: "09:00"
  endTime     String        // Format: "10:00"
  duration    Int           // Duration in minutes
  status      BookingStatus @default(PENDING)
  notes       String?       @db.Text
  meetingType MeetingType   @default(ONLINE)
  meetingLink String?       // For online meetings
  location    String?       // For in-person meetings
  totalAmount Decimal       @db.Decimal(10, 2)
  commission  Decimal       @db.Decimal(10, 2) // Platform commission
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  client      User          @relation(fields: [clientId], references: [id], onDelete: Cascade)
  agent       AgentProfile  @relation(fields: [agentId], references: [id], onDelete: Cascade)
  service     Service?      @relation(fields: [serviceId], references: [id])
  payments    Payment[]
  messages    Message[]
  reviews     Review[]
}

enum MeetingType {
  ONLINE
  IN_PERSON
  PHONE
}

model Review {
  id        String   @id @default(cuid())
  clientId  String
  agentId   String
  bookingId String?
  rating    Int      // 1-5 stars
  comment   String?  @db.Text
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  client    User         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  agent     AgentProfile @relation(fields: [agentId], references: [id], onDelete: Cascade)
  booking   Booking?     @relation(fields: [bookingId], references: [id])

  @@unique([clientId, agentId, bookingId])
}

model Message {
  id        String   @id @default(cuid())
  senderId  String
  receiverId String
  bookingId String?
  content   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  sender    User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver  User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  booking   Booking? @relation(fields: [bookingId], references: [id])
}

model Payment {
  id            String        @id @default(cuid())
  bookingId     String
  clientId      String
  amount        Decimal       @db.Decimal(10, 2)
  currency      String        @default("AUD")
  status        PaymentStatus @default(PENDING)
  method        PaymentMethod
  stripePaymentIntentId String?
  stripeRefundId String?
  refundAmount  Decimal?      @db.Decimal(10, 2)
  refundReason  String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  booking       Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  client        User          @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model Document {
  id          String   @id @default(cuid())
  agentId     String
  name        String
  type        String   // MARA_CERTIFICATE, BUSINESS_LICENSE, etc.
  url         String
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  agent       AgentProfile @relation(fields: [agentId], references: [id], onDelete: Cascade)
}

model Favorite {
  id        String   @id @default(cuid())
  clientId  String
  agentId   String
  createdAt DateTime @default(now())

  client    User         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  agent     AgentProfile @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@unique([clientId, agentId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String   @db.Text
  type      String   // BOOKING, PAYMENT, MESSAGE, etc.
  isRead    Boolean  @default(false)
  data      Json?    // Additional data
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
} 